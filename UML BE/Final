@startuml
class ChatGPTService {
    + ChatGPTService(httpClient:HttpClient, configuration:IConfiguration)
    +  GetChatGPTDescription(prompt:string) : Task<ChatGPTPayload>
}

class EmailReputationService {
    + EmailReputationService(repository:IEmailReputationRepository)
    +  IncreaseBounceCount(emailAddress:string, isHardBounce:bool) : Task<IActionResult>
    +  IncreaseComplaintCount(emailAddress:string) : Task<IActionResult>
    + CheckReputation(emailAddress:string) : (bool hasBadReputation, string? message)
}

class EmailService {
    + EmailService(userRepository:IUserRepository, encryptionService:EncryptionService, emailReputationService:EmailReputationService, configuration:IConfiguration, contextAccessor:IHttpContextAccessor, captchaService:ReCaptchaService)
    +  SendForgotPasswordVerificationEmail(email:string, reCaptchaToken:string) : Task<VerificationEmailPayload>
    +  SendRegisterVerificationEmail(email:string, userId:Guid, firstName:string) : Task<VerificationEmailPayload>
    +  ResendRegisterVerificationEmail() : Task<VerificationEmailPayload>
}
EmailService --> EmailReputationService
EmailService --> EncryptionService
EmailService --> ReCaptchaService

class EncryptionService {
    + EncryptionService(configuration:IConfiguration)
    + Encrypt(plainText:string) : string
    + Decrypt(cipherText:string) : string
}

class EventService {
    + EventService(repository:IEventRepository, tagService:TagService, eventTagService:EventTagService, eventUserService:EventUserService)
    + GetEvent() : IQueryable<EventDto>
    + GetEvents(sorting:string, tags:IList<string>?, searchText:string) : IQueryable<EventDto>
    +  CreateEvent(input:CreateEventInput) : Task<CreateEventPayload>
    +  DeleteEvent(id:Guid) : Task<DeleteEventPayload>
}
EventService --> TagService
EventService --> EventTagService
EventService --> EventUserService

class EventTagService {
    + EventTagService(repository:IEventTagRepository, tagRepository:ITagRepository)
    +  AttachTagToEvent(input:EventAndTagInput) : Task<AttachTagToEventPayload>
    +  AttachTagsToEvent(input:EventAndTagsInput) : Task<AttachTagsToEventPayload>
    +  RemoveTagFromEvent(input:EventAndTagInput) : Task<RemoveTagFromEventPayload>
}

class EventUserService {
    + EventUserService(repository:IEventUserRepository, userRepository:IUserRepository, contextAccessor:IHttpContextAccessor, serializer:IIdSerializer)
    +  AddUserToEvent(input:AddUserToEventInput) : Task<AddUserToEventPayload>
    +  AddSelfToEvent(input) 
    +  RemoveUserFromEvent(input:RemoveUserFromEventInput) : Task<RemoveUserFromEventPayload>
}

class ReCaptchaService {
    + ReCaptchaService(configuration:IConfiguration, httpClient:HttpClient)
    +  ValidateReCaptcha(recaptcha:string) : Task<bool>
}

class RoleService {
    + RoleService(roleRepository:IRoleRepository)
    + GetRolesById(userRoles:IList<UserRole>) : IList<Role>
    + GetRoles(roleIds:IList<Guid>?) : IQueryable<Role>
    +  CreateRole(input:RoleNameInput) : Task<CreateRolePayload>
    +  DeleteRole(input:RoleNameInput) : Task<DeleteRolePayload>
}

class TagService {
    + TagService(repository:ITagRepository)
    + GetTags() : IQueryable<Tag>
    +  CreateTag(input:CreateTagInput) : Task<CreateTagPayload>
    +  CreateTags(input:CreateTagsInput) : Task<CreateTagPayload>
    +  DeleteTag(input:DeleteTagInput) : Task<DeleteTagPayload>
}

class UserRoleService {
    + UserRoleService(repository:IUserRoleRepository)
    + GetRoleId(id:Guid) : IList<UserRole>
    +  GrantRoleToUser(input:RoleAndUserInput) : Task<UserRolesPayload>
    +  RemoveRoleFromUser(input:RoleAndUserInput) : Task<UserRolesPayload>
}

class UserService {
    + UserService(repository:IUserRepository, userRoleRepository:IUserRoleRepository, roleService:RoleService, encryptionService:EncryptionService, emailService:EmailService, userRoleService:UserRoleService, reCaptchaService:ReCaptchaService, contextAccessor:IHttpContextAccessor)
    + GetUserInfo() : IQueryable<User>
    + GetUsers() : IQueryable<User>
    +  CreateUser(input:CreateUserInput) : Task<CreateUserPayload>
    +  VerifyUser(emailAddress:string, token:string) : Task<VerifyUserPayload>
    +  DeleteUser() : Task<DeleteUserPayload>
    +  UpdateUser(input:UpdateUserInput) : Task<UpdateUserPayload>
    +  ChangePassword(emailAddress:string, verificationCode:string, password:string, reCaptcha:string) : Task<ChangePasswordPayload>
    +  Login(loginInput:LoginInput) : Task<LoginPayload>
    +  SignOut() : Task
}
UserService --> UserRoleService
UserService --> RoleService
UserService --> EncryptionService
UserService --> EmailService
UserService --> ReCaptchaService
@enduml
